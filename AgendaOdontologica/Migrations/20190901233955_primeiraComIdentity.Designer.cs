// <auto-generated />
using System;
using AgendaOdontologica.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AgendaOdontologica.Migrations
{
    [DbContext(typeof(AgendaOdontologicaDbContext))]
    [Migration("20190901233955_primeiraComIdentity")]
    partial class primeiraComIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AgendaOdontologica.Models.Agendamento", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("DentistaId");

                    b.Property<string>("DentistaId1");

                    b.Property<DateTime>("HoraAtendimento");

                    b.Property<int>("PacienteId");

                    b.Property<string>("PacienteId1");

                    b.Property<int>("SecretariaId");

                    b.Property<string>("SecretariaId1");

                    b.Property<DateTime>("TempoAtemdimento");

                    b.HasIndex("DentistaId1");

                    b.HasIndex("PacienteId1");

                    b.HasIndex("SecretariaId1");

                    b.ToTable("Agendamento");

                    b.HasDiscriminator().HasValue("Agendamento");
                });

            modelBuilder.Entity("AgendaOdontologica.Models.Dentista", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("CEP");

                    b.Property<string>("CPF")
                        .IsRequired();

                    b.Property<DateTime>("DataAdmissao");

                    b.Property<DateTime>("DataNaci");

                    b.Property<string>("Endereco")
                        .IsRequired();

                    b.Property<int>("EspecializacaoId");

                    b.Property<string>("EspecializacaoId1");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("PIS")
                        .IsRequired();

                    b.Property<string>("Senha")
                        .IsRequired();

                    b.HasIndex("EspecializacaoId1");

                    b.ToTable("Dentista");

                    b.HasDiscriminator().HasValue("Dentista");
                });

            modelBuilder.Entity("AgendaOdontologica.Models.Especializacao", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Especialidade");

                    b.ToTable("Especializacao");

                    b.HasDiscriminator().HasValue("Especializacao");
                });

            modelBuilder.Entity("AgendaOdontologica.Models.Funcionario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("CEP")
                        .HasColumnName("Funcionario_CEP");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnName("Funcionario_CPF");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnName("Funcionario_DataAdmissao");

                    b.Property<DateTime>("DataNaci")
                        .HasColumnName("Funcionario_DataNaci");

                    b.Property<string>("Endereco")
                        .HasColumnName("Funcionario_Endereco");

                    b.Property<string>("Funcao")
                        .IsRequired();

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("Funcionario_Login");

                    b.Property<string>("NomeFuncionario")
                        .IsRequired();

                    b.Property<string>("PIS")
                        .HasColumnName("Funcionario_PIS");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnName("Funcionario_Senha");

                    b.ToTable("Funcionario");

                    b.HasDiscriminator().HasValue("Funcionario");
                });

            modelBuilder.Entity("AgendaOdontologica.Models.HomeLogin", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Login")
                        .HasColumnName("HomeLogin_Login");

                    b.Property<string>("Senha")
                        .HasColumnName("HomeLogin_Senha");

                    b.ToTable("HomeLogin");

                    b.HasDiscriminator().HasValue("HomeLogin");
                });

            modelBuilder.Entity("AgendaOdontologica.Models.Paciente", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("CEP")
                        .HasColumnName("Paciente_CEP");

                    b.Property<string>("CPF")
                        .HasColumnName("Paciente_CPF");

                    b.Property<string>("Endereço");

                    b.Property<string>("FormaDePagamento");

                    b.Property<string>("NomePaciente");

                    b.Property<string>("RG");

                    b.Property<double>("ValorTratamento");

                    b.ToTable("Paciente");

                    b.HasDiscriminator().HasValue("Paciente");
                });

            modelBuilder.Entity("AgendaOdontologica.Models.Secretaria", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("CEP")
                        .HasColumnName("Secretaria_CEP");

                    b.Property<string>("CPF")
                        .HasColumnName("Secretaria_CPF");

                    b.Property<DateTime>("DataAdmissao")
                        .HasColumnName("Secretaria_DataAdmissao");

                    b.Property<DateTime>("DataNaci")
                        .HasColumnName("Secretaria_DataNaci");

                    b.Property<string>("Endereco")
                        .HasColumnName("Secretaria_Endereco");

                    b.Property<string>("Login")
                        .HasColumnName("Secretaria_Login");

                    b.Property<string>("Nome")
                        .HasColumnName("Secretaria_Nome");

                    b.Property<string>("PIS")
                        .HasColumnName("Secretaria_PIS");

                    b.Property<string>("Senha")
                        .HasColumnName("Secretaria_Senha");

                    b.ToTable("Secretaria");

                    b.HasDiscriminator().HasValue("Secretaria");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgendaOdontologica.Models.Agendamento", b =>
                {
                    b.HasOne("AgendaOdontologica.Models.Dentista", "Dentista")
                        .WithMany()
                        .HasForeignKey("DentistaId1");

                    b.HasOne("AgendaOdontologica.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId1");

                    b.HasOne("AgendaOdontologica.Models.Secretaria", "Secretaria")
                        .WithMany()
                        .HasForeignKey("SecretariaId1");
                });

            modelBuilder.Entity("AgendaOdontologica.Models.Dentista", b =>
                {
                    b.HasOne("AgendaOdontologica.Models.Especializacao", "Especializacao")
                        .WithMany()
                        .HasForeignKey("EspecializacaoId1");
                });
#pragma warning restore 612, 618
        }
    }
}
